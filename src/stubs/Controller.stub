<?php

namespace {{controllerNamespace}};

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Log;
use {{usecaseNamespace}}\Create{{modelName}}UseCase;
use {{usecaseNamespace}}\Delete{{modelName}}UseCase;
use {{usecaseNamespace}}\Get{{modelName}}UseCase;
use {{usecaseNamespace}}\Update{{modelName}}UseCase;
use {{exceptionRepositoryNamespace}}\{{modelName}}RepositoryException;

class {{modelName}}Controller extends Controller
{
    /**
     * Create a new controller instance.
     *
     */
    public function __construct(
        private Create{{modelName}}UseCase $create{{modelName}}UseCase,
        private Update{{modelName}}UseCase $update{{modelName}}UseCase,
        private Delete{{modelName}}UseCase $delete{{modelName}}UseCase,
        private Get{{modelName}}UseCase $get{{modelName}}UseCase
    ){
    }

    public function createAction(Request $request)
    {
        try {
            ${{modelNameLowerCase}}_created = $this->create{{modelName}}UseCase->execute($request);
            return response(${{modelNameLowerCase}}_created, Response::HTTP_CREATED)->header('Content-Type', 'application/json');

        } catch ({{modelName}}RepositoryException $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            return response()->json(['Error' => '{{modelName}}Error', 'message' => $message], Response::HTTP_BAD_REQUEST);
        }catch(\Exception $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            Log::error($e->getMessage());
            return response('Ups! algo no salio como esper치bamos, sorry.'.$message, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function updateAction()
    {
        try {

            ${{modelNameLowerCase}}_updated = $this->update{{modelName}}UseCase->execute(request());
            return response(${{modelNameLowerCase}}_updated, Response::HTTP_OK)->header('Content-Type', 'application/json');

        } catch ({{modelName}}RepositoryException $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            return response()->json(['Error' => '{{modelName}}Error', 'message' => $message], Response::HTTP_BAD_REQUEST);
        }catch(\Exception $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            Log::error($e->getMessage());
            return response('Ups! algo no salio como esper치bamos, sorry.'.$message, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function deleteAction()
    {
        try {

            if (request()->has('id')) {
                $response =  $this->delete{{modelName}}UseCase->execute(request());
                return response($response, Response::HTTP_OK)->header('Content-Type', 'application/json');
            }
            throw new {{modelName}}RepositoryException('Invalid params');

        } catch ({{modelName}}RepositoryException $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            return response()->json(['Error' => '{{modelName}}Error', 'message' => $message], Response::HTTP_BAD_REQUEST);
        }catch(\Exception $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            Log::error($e->getMessage());
            return response('Ups! algo no salio como esper치bamos, sorry.'.$message, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function getAction()
    {
        try {
            $response = [];
            $response['pagination'] = [];
            $response['data'] = (${{modelNameLowerCase}} = $this->get{{modelName}}UseCase->execute(request()))? ${{modelNameLowerCase}} : [];

            if (request()->has('page')) {

                $page = request()->page;
                $limit = env('ITEMS_PER_PAGE');
                $offset = ($page-1) * $limit;

                $response['pagination'] = [
                    'total' => count($response['data']),
                    'items_per_page' => $limit,
                    'actual_page' => $page
                ];
                $response['data'] = array_slice($response['data'], $offset, $limit);
            }

            return response($response, Response::HTTP_OK)->header('Content-Type', 'application/json');

        } catch ({{modelName}}RepositoryException $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            return response()->json(['Error' => '{{modelName}}Error', 'message' => $message], Response::HTTP_BAD_REQUEST);
        }catch(\Exception $e) {
            $message = (env("APP_DEBUG") == true) ? $e->getMessage(): '';
            Log::error($e->getMessage());
            return response('Ups! algo no salio como esper치bamos, sorry.'.$message, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
